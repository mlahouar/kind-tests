version: '3'

vars:
  KIND_NETWORK:
    sh: docker network inspect -f '{{`{{.IPAM.Config}}`}}' kind | sed -E 's/\[\{([0-9]{1,3}(\.[0-9]{1,3})).*/\1/'
  METALLB_MANIFEST: https://raw.githubusercontent.com/metallb/metallb/v0.13.7/config/manifests/metallb-native.yaml

tasks:
  create-ca:
    cmds:
      - |
        mkdir -p ca
        cd ca
        [ -f "ca.crt" ] && echo "We have detected an existing certificate file for Kind. Would you like to recreate the Certificate Authority (CA) despite this? (y/n) " && read yn && [ "${yn}" = "n" ] && exit 0 || echo ""
        cat << EOF > req.cnf
        [ req ]
        distinguished_name	= req_distinguished_name
        attributes		= req_attributes
        [ req_distinguished_name ]
        countryName			= Country Name (2 letter code)
        countryName_min			= 2
        countryName_max			= 2
        stateOrProvinceName		= State or Province Name (full name)
        localityName			= Locality Name (eg, city)
        0.organizationName		= Organization Name (eg, company)
        organizationalUnitName		= Organizational Unit Name (eg, section)
        commonName			= Common Name (eg, fully qualified host name)
        commonName_max			= 64
        emailAddress			= Email Address
        emailAddress_max		= 64
        [ req_attributes ]
        challengePassword		= A challenge password
        challengePassword_min		= 4
        challengePassword_max		= 20
        [ v3_ca ]
        basicConstraints = critical,CA:TRUE
        subjectKeyIdentifier = hash
        authorityKeyIdentifier = keyid:always,issuer:always
        EOF
        openssl genrsa -out ca.key 4096 2>/dev/null
        openssl req -x509 -new -nodes -key ca.key -sha256 -days 3650 -out ca.crt -extensions v3_ca -config req.cnf -subj "/C=FR/ST=Paris/L=Paris/OU=Kind/CN=ca.kind"

  setup-kind:
    cmds:
      - kind create cluster --config=small-cluster-config.yaml
      - task: install-metallb
      - task: install-cert-manager
      - task: install-nginx-ingress

  setup-kind-ha:
    cmds:
      - kind create cluster --config=ha-cluster-config.yaml
      - task: install-metallb
      - task: install-cert-manager
      - task: install-nginx-ingress

  install-metallb:
    cmds:
      - kubectl apply -f {{.METALLB_MANIFEST}}
      - sleep 20
      - kubectl wait --namespace metallb-system --for=condition=ready pod --selector=app=metallb --timeout=90s
      - |
        kubectl apply -f - <<EOF
        apiVersion: metallb.io/v1beta1
        kind: IPAddressPool
        metadata:
          name: kind-metallb
          namespace: metallb-system
        spec:
          addresses:
          - {{ .KIND_NETWORK }}.255.200-{{ .KIND_NETWORK }}.255.250
        ---
        apiVersion: metallb.io/v1beta1
        kind: L2Advertisement
        metadata:
          name: empty
          namespace: metallb-system
        EOF

  uninstall-metallb:
    cmds:
      - |
        kubectl delete -f - <<EOF
        apiVersion: metallb.io/v1beta1
        kind: IPAddressPool
        metadata:
          name: kind-metallb
          namespace: metallb-system
        spec:
          addresses:
          - {{ .KIND_NETWORK }}.255.200-{{ .KIND_NETWORK }}.255.250
        ---
        apiVersion: metallb.io/v1beta1
        kind: L2Advertisement
        metadata:
          name: empty
          namespace: metallb-system
        EOF
      - kubectl delete -f {{.METALLB_MANIFEST}}

  install-cert-manager:
    cmds:
      - kubectl create namespace cert-manager
      - helm repo add jetstack https://charts.jetstack.io
      - helm repo update
      - |
        helm install \
        cert-manager jetstack/cert-manager \
        --namespace cert-manager \
        --create-namespace \
        --version v1.14.3 \
        --set installCRDs=true
        
        kubectl create secret tls ca-key-pair --cert=ca/ca.crt --key=ca/ca.key --namespace cert-manager

        kubectl apply -f - <<EOF
        apiVersion: cert-manager.io/v1
        kind: ClusterIssuer
        metadata:
          name: ca-issuer
          namespace: cert-manager
        spec:
          ca:
            secretName: ca-key-pair
        EOF

  uninstall-cert-manager:
    cmds:
      - |
        kubectl delete -f - <<EOF
        apiVersion: cert-manager.io/v1
        kind: ClusterIssuer
        metadata:
          name: ca-issuer
          namespace: cert-manager
        spec:
          ca:
            secretName: ca-key-pair
        EOF
      - kubectl delete secret ca-key-pair -n cert-manager
      - helm uninstall cert-manager --namespace cert-manager
      - kubectl delete namespace cert-manager


  install-nginx-ingress:
    cmds:
      - |
        kubectl create namespace ingress-nginx
        kubectl apply -f - <<EOF
        apiVersion: cert-manager.io/v1
        kind: Certificate
        metadata:
          name: wildcard-prod
          namespace: ingress-nginx
        spec:
          secretName: default-tls
          issuerRef:
            name: ca-issuer
            kind: ClusterIssuer
          commonName: '*.kind'
          dnsNames:
            - "*.kind"
        EOF
        
        helm pull oci://ghcr.io/nginxinc/charts/nginx-ingress --untar --version 1.1.0
        cd nginx-ingress
        helm upgrade --install ingress-nginx .  \
            --set controller.enableTLSPassthrough=true \
            --set controller.defaultTLS.secret="ingress-nginx/default-tls" \
            --set controller.wildcardTLS.secret="ingress-nginx/default-tls" \
            -n ingress-nginx

      - rm -rf nginx-ingress
  uninstall-nginx-ingress:
    cmds:
      - |
        helm uninstall ingress-nginx -n ingress-nginx
        kubectl delete namespace ingress-nginx

  install-minio:
    cmds:
      - |
        kubectl create ns minio
        helm repo add minio https://charts.min.io/
        helm install --namespace minio --values minio-values.yaml minio minio/minio
        
  uninstall-minio:
    cmds:
      - |
        helm uninstall minio -n minio
        kubectl delete namespace minio
        
        

        
    
        


